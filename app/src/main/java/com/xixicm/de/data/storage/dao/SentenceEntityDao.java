package com.xixicm.de.data.storage.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xixicm.de.data.entity.SentenceEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENTENCE".
*/
public class SentenceEntityDao extends AbstractDao<SentenceEntity, Long> {

    public static final String TABLENAME = "SENTENCE";

    /**
     * Properties of entity SentenceEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sid = new Property(1, String.class, "sid", false, "SID");
        public final static Property Dateline = new Property(2, String.class, "dateline", false, "DATELINE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property AllContent = new Property(4, String.class, "allContent", false, "ALL_CONTENT");
        public final static Property IsStar = new Property(5, Boolean.class, "isStar", false, "IS_STAR");
    }


    public SentenceEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SentenceEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENTENCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SID\" TEXT," + // 1: sid
                "\"DATELINE\" TEXT," + // 2: dateline
                "\"CONTENT\" TEXT," + // 3: content
                "\"ALL_CONTENT\" TEXT," + // 4: allContent
                "\"IS_STAR\" INTEGER);"); // 5: isStar
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENTENCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SentenceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(3, dateline);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String allContent = entity.getAllContent();
        if (allContent != null) {
            stmt.bindString(5, allContent);
        }
 
        Boolean isStar = entity.getIsStar();
        if (isStar != null) {
            stmt.bindLong(6, isStar ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SentenceEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(2, sid);
        }
 
        String dateline = entity.getDateline();
        if (dateline != null) {
            stmt.bindString(3, dateline);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String allContent = entity.getAllContent();
        if (allContent != null) {
            stmt.bindString(5, allContent);
        }
 
        Boolean isStar = entity.getIsStar();
        if (isStar != null) {
            stmt.bindLong(6, isStar ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SentenceEntity readEntity(Cursor cursor, int offset) {
        SentenceEntity entity = new SentenceEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dateline
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // allContent
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // isStar
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SentenceEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDateline(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAllContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsStar(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SentenceEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SentenceEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SentenceEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
